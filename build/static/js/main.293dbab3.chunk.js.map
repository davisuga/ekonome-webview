{"version":3,"sources":["services/firebase.ts","pages/Home.tsx","services/auth.tsx","pages/Login/index.tsx","pages/router.tsx","serviceWorker.ts","index.tsx"],"names":["app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","config","Home","useState","chatURL","setChatURL","callAccepted","setCallAccepted","ifTheresNewCallRequest","setIfTheresNewCallRequest","economistID","setEconomistID","Msg","closeToast","onClick","acceptCall","handleCallStateChange","data","console","log","val","RegExp","test","toast","setupFirebase","a","economistIdOnDatabase","auth","currentUser","uid","database","ref","on","useEffect","quit","signOut","catch","error","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","onAPILoad","JitsiMeetAPI","executeCommand","displayName","roomName","startAudioOnly","interfaceConfig","SHOW_JITSI_WATERMARK","set","id","AuthContext","React","createContext","Login","login","email","password","setPersistence","Auth","Persistence","LOCAL","signInWithEmailAndPassword","creds","window","location","href","setEmail","setPassword","useContext","onChange","text","currentTarget","value","raised","App","isSignedIn","user","providerId","path","element","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.293dbab3.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAYP7Xkm9NF-Q8YxMuUwigWfiEZW4GoJ3w\",\n  authDomain: \"ekonome-app.firebaseapp.com\",\n  databaseURL: \"https://ekonome-app.firebaseio.com\",\n  projectId: \"ekonome-app\",\n  storageBucket: \"ekonome-app.appspot.com\",\n  messagingSenderId: \"497077480109\",\n  appId: \"1:497077480109:web:b11e78da87be0224d17424\",\n  measurementId: \"G-RFVWR7Y67L\",\n};\n// Initialize Firebase\nconst app = firebase.initializeApp(firebaseConfig);\nexport default app;\nexport const config = {\n  apiKey: \"AIzaSyAYP7Xkm9NF-Q8YxMuUwigWfiEZW4GoJ3w\",\n  authDomain: \"ekonome-app.firebaseapp.com\",\n  databaseURL: \"https://ekonome-app.firebaseio.com\",\n  projectId: \"ekonome-app\",\n  storageBucket: \"ekonome-app.appspot.com\",\n  messagingSenderId: \"497077480109\",\n  appId: \"1:497077480109:web:b11e78da87be0224d17424\",\n  measurementId: \"G-RFVWR7Y67L\",\n};\n","import React, { useEffect, useState } from \"react\";\nimport app from \"../services/firebase\";\n// import { Container } from './styles';\nimport { Button } from \"@rmwc/button\";\nimport Jitsi from \"react-jitsi\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\ntype ToastProps = {\n  closeToast?: any;\n};\n\nconst Home: React.FC = () => {\n  const [chatURL, setChatURL] = useState(\"teste\");\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [ifTheresNewCallRequest, setIfTheresNewCallRequest] = useState(false);\n  const [economistID, setEconomistID] = useState(\"\");\n  const Msg = ({ closeToast }: ToastProps) => (\n    <div>\n      Accept call from anonymous?\n      <br />\n      <Button onClick={() => acceptCall()}>Yes</Button>\n      <Button\n        onClick={() => {\n          closeToast();\n          setIfTheresNewCallRequest(false);\n        }}\n      >\n        No\n      </Button>\n    </div>\n  );\n\n  const handleCallStop = () => {\n    setCallAccepted(false);\n    setIfTheresNewCallRequest(false);\n    app.database().ref(`/economists/${economistID}`).set(\"\");\n  };\n\n  const acceptCall = () => {\n    setCallAccepted(true);\n    setIfTheresNewCallRequest(false);\n  };\n\n  const displayMsg = () => {\n    //@ts-ignore\n    toast(<Msg />);\n    // toast(Msg) would also work\n  };\n\n  const handleCallStateChange = (data: firebase.database.DataSnapshot) => {\n    console.log(\"changed call state\");\n    setChatURL(data.val());\n    var patt = new RegExp(\"meet.jitsi.si/*\");\n    var isUrlValid = patt.test(data.val());\n    if (isUrlValid) {\n      setIfTheresNewCallRequest(true);\n      displayMsg();\n    }\n\n    console.log(\"got value \", chatURL);\n  };\n\n  const setupFirebase = async () => {\n    const economistIdOnDatabase: string = app.auth()?.currentUser?.uid || \"\";\n    setEconomistID(economistIdOnDatabase);\n    app\n      .database()\n      .ref(`/economists/${economistIdOnDatabase}`)\n      .on(\"value\", (data) => {\n        handleCallStateChange(data);\n      });\n  };\n  useEffect(() => {\n    setupFirebase();\n    return () => {\n      console.log(`byebye`);\n    };\n  }, []);\n\n  const quit = async () => {\n    await app\n      .auth()\n      .signOut()\n      .catch((error) => console.log(\"error\", error));\n    console.log(\"quitting...\");\n  };\n  const handleAPI = (JitsiMeetAPI: any) => {\n    JitsiMeetAPI.executeCommand(\"toggleVideo\");\n  };\n\n  // @ts-ignore\n\n  return (\n    <div>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={50000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <h1>Home</h1>\n      <div>\n        {ifTheresNewCallRequest && <div>SOMEONE IS CALLIN YOU BRUH</div>}\n      </div>\n      <div>\n        {callAccepted && (\n          <Jitsi\n            onAPILoad={handleAPI}\n            displayName=\"Me\"\n            roomName={chatURL}\n            config={{ startAudioOnly: true }}\n            interfaceConfig={{\n              SHOW_JITSI_WATERMARK: false,\n            }}\n          />\n        )}\n      </div>\n      <Button onClick={() => quit()}>QUIT ME RN</Button>\n      {callAccepted && (\n        <Button onClick={() => handleCallStop()}>Close Call</Button>\n      )}\n\n      <div id=\"meet\"></div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport app from \"../services/firebase\";\nexport const AuthContext = React.createContext(false);\ntype AuthProps = {\n  children: any;\n};\nexport const AuthProvider = ({ children }: AuthProps) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  useEffect(() => {\n    app.auth().onAuthStateChanged((userAuth) => {\n      // @ts-ignore\n      setCurrentUser(userAuth);\n    });\n    return () => {\n      console.log(\"bye\");\n    };\n  }, []);\n  return (\n    // @ts-ignore\n    <AuthContext.Provider value={{ currentUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { Grid, GridCell } from \"@rmwc/grid\";\nimport { TextField } from \"@rmwc/textfield\";\nimport \"@rmwc/textfield/styles\";\nimport \"@rmwc/button/styles\";\nimport app from \"../services/firebase\";\nimport { Button } from \"@rmwc/button\";\nimport { AuthContext } from \"../services/auth\";\nimport firebase from \"firebase\";\nexport default function Login() {\n  const login = async (email: string, password: string) => {\n    await app.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n    const creds = await app.auth().signInWithEmailAndPassword(email, password);\n    window.location.href = \"/\";\n    console.log(creds);\n  };\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const authContext = useContext(AuthContext);\n\n  return (\n    <Grid>\n      <GridCell>\n        <h1>Login</h1>\n        <form>\n          <h2>Email</h2>\n          <TextField onChange={(text) => setEmail(text.currentTarget.value)} />\n          <h2>Password</h2>\n          <TextField\n            onChange={(text) => setPassword(text.currentTarget.value)}\n          />\n        </form>\n        <Button onClick={() => login(email, password)} raised>\n          LOGIN\n        </Button>\n      </GridCell>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport Home from \"../pages/Home\";\nimport Login from \"../pages/Login\";\nimport { AuthProvider, AuthContext } from \"../services/auth\";\nimport PrivateRoute from \"../components/PrivateRoute\";\n// import { Container } from './styles';\nimport {\n  FirebaseAuthProvider,\n  FirebaseAuthConsumer,\n} from \"@react-firebase/auth\";\nimport { BrowserRouter, Routes, Route, Link, Navigate } from \"react-router-dom\";\nimport firebase from \"firebase\";\nimport { config } from \"../services/firebase\";\nfunction App() {\n  return (\n    <FirebaseAuthProvider firebase={firebase} {...config}>\n      <FirebaseAuthConsumer>\n        {({ isSignedIn, user, providerId }) => {\n          if (isSignedIn) {\n            return (\n              <BrowserRouter>\n                <Routes>\n                  <Route path=\"/\" element={<Home />} />\n                </Routes>\n              </BrowserRouter>\n            );\n          } else {\n            return (\n              <BrowserRouter>\n                <Routes>\n                  <Route\n                    path={isSignedIn ? \"/changeuser\" : `/login`}\n                    element={<Login />}\n                  />\n                </Routes>\n              </BrowserRouter>\n            );\n          }\n        }}\n      </FirebaseAuthConsumer>\n    </FirebaseAuthProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./pages/router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}